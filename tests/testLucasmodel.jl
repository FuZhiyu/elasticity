
module testlucasmodel
include("../src/utils.jl")
include("../src/LucasModel.jl")
using .LucasModel: LucasParameters, LucasHouseholds, œà_markov!, solveR!
using .LucasModel: solveŒ∏bywÃÉ!, Œ∏foc
using .LucasModel: @unpack_LucasParameters, @unpack_LucasHouseholds
using LinearAlgebra, Test
#########################################
#       Simpliest Lucas
#########################################

p = LucasParameters(
    agrid = [exp(x)-1 for x in 0.05:0.05:5], 
    # œàgrid = [0.1:0.1:0.99;], 
    œàgrid = [1.0;], 
    œÉx=.0, œÅx = 1.0,
    ùîºŒµy = expectation(Normal(), Gaussian; n = 20)
)
œà_markov!(p)
solveR!(p)

hh = LucasHouseholds(p)
@unpack_LucasParameters p
@unpack_LucasHouseholds hh
@. hh.V‚Ä≤mat = agrid^(1-Œ≥)/(1-Œ≥)
Vamat = centraldiff(V‚Ä≤mat, agrid)
Vaapproxfunc = partialinterpolate(agrid, Vamat, Linear())
Varealfunc(w, œà) = w^-Œ≥


Œ∏focerror_real = [Œ∏foc(1.0, x, 1, (Vafunc = Varealfunc, ), p) for x in agrid]
@test norm(Œ∏focerror) < 1e-10

Œ∏focerror_approx = [Œ∏foc(1.0, x, 1, (Vafunc = Vaapproxfunc, ), p) for x in agrid]
@test norm(Œ∏focerror) < 1e-10

Œ∏sol_real = [find_zero(x->Œ∏foc(x, a, 1, (Vafunc = Varealfunc, ), p), 0.5) for a in agrid]
@test norm(Œ∏sol_real .- 1) < 1e-10

Œ∏sol_approx = [find_zero(x->Œ∏foc(x, a, 1, (Vafunc = Vaapproxfunc, ), p), 0.5) for a in agrid]
@test norm(Œ∏sol_approx .- 1) < 1e-10



end